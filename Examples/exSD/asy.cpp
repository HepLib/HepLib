#include "SD.h"
#include "mpreal.h"

using namespace HepLib;

int main(int argc, char** argv) {

    //SD::debug = true;

    auto ep = SD::ep;
    symbol p("p"), k("k"), q("q");
    
    if(false){
        auto m = SD::vs;
        FeynmanParameter fp;
        fp.LoopMomenta = lst{k, p};
        fp.Propagators = lst{-p*p, -k*k+m*m, -pow(k+p,2)+m*m, -pow(p+q,2)+1};
        fp.Exponents = lst{2,1,1,1};
        fp.lReplacements[q*q] = 1;
        fp.Prefactor = SD::PrefactorFIESTA(2);
        fp.isAsy = true;
        
        SD work;
        work.Verbose = 100;
        work.Evaluate(fp);
        cout << work.VEResult() << endl;
        cout << "Check with: " << endl;
        cout << "s^(-1)*(-3.26455E-9 +- 1.12766E-6)*log(s)+((-1.0 +- 1.24064E-15)*log(s)+(-1.0000000080670013 +- 2.49431E-6)+(8.1614E-10 +- 2.81914E-7)*s^(-1))*ep^(-1)+(-2.4674007475879325 +- 9.7055E-6)*s^(-1)+(0.5 +- 2.77413E-16)*ep^(-2)+(2.0000000048270903 +- 2.79417E-6)*log(s)+I*(3.208732014E-50 +- 1.608930306E-56)+(2.0 +- 2.48128E-15)*log(s)^2+(6.467394782535083 +- 1.70427E-5)" << endl;
    }
    
    
    if(false){
        auto m = SD::vs;
        auto eps = SD::eps;
        FeynmanParameter fp;
        fp.LoopMomenta = lst{k};
        fp.Propagators = lst{-pow(k,2)+m*m, -pow(k-q,2)+m*m};
        fp.Exponents = lst{1,1};
        fp.lReplacements[q*q] = 1;
        fp.Prefactor = SD::PrefactorFIESTA(1);
        fp.isAsy = true;
        
        SD work;
        work.Verbose = 100;
        work.epN = 0;
        work.sN = 2;
        work.Evaluate(fp);
        cout << work.VEResult() << endl;
        cout << "Check with: " << endl;
        cout << "log(s)*s^2*(-4.0000000000000115 +- 3.1771E-7)+I*log(s)*(-5.6369E-15 +- 2.66355E-7)*s^2+I*(3.1415926535897932385 +- 1.74304E-15)+(s^2*(5.71196E-15 +- 1.58854E-7)+I*s^2*(2.81844E-15 +- 1.33177E-7)+(1.0 +- 5.5483E-16))*ep^(-1)+(1.999999987085929 +- 5.6041E-6)+(1.999999982118994 +- 5.7987E-6)*s^2+I*s^2*(-6.283185307018979 +- 3.59083E-7)" << endl;
    }
    
    // potential region
    if(false) {
        auto m2 = pow(SD::vs,2)+1/ex(4);
        auto eps = SD::eps;
        FeynmanParameter fp;
        fp.LoopMomenta = lst{k};
        fp.Propagators = lst{-pow(k,2)+m2, -pow(k-q,2)+m2};
        fp.Exponents = lst{1,1};
        fp.lReplacements[q*q] = 1;
        fp.Prefactor = SD::PrefactorFIESTA(1);
        fp.isAsy = true;
        
        SD work;
        work.Verbose = 100;
        work.epN = 0;
        work.sN = 2*2;
        work.Evaluate(fp);
        cout << work.VEResult() << endl;
        cout << "Check with: " << endl;
        cout << "(-2.666666667 +- 3.644273589E-33)*s^2+I*(2.316762755E-37 +- 1.356564457E-33)*s^2+sqrt(s)*(-6.283185307 +- 0)+((1.00000000000000000000000004104146966323 +- 3.4162E-17)+I*(7.431143456E-51 +- 4.802973566E-37))*ep^(-1)+s*(4 +- 1.604518999E-36)+(3.38629434919921 +- 5.17274E-6)+I*(1.157409821E-37 +- 9.367271553E-38)*s+I*(-7.23381139E-39 +- 1.249988435E-35)" << endl;
    }
    
    // potential region with Expand
    if(false) {
        auto m2 = SD::vs+1/ex(4);
        auto eps = SD::eps;
        FeynmanParameter fp;
        fp.LoopMomenta = lst{k};
        fp.Propagators = lst{-pow(k,2)+m2, -pow(k-q,2)+m2};
        fp.Exponents = lst{1,1};
        fp.lReplacements[q*q] = 1;
        fp.Prefactor = SD::PrefactorFIESTA(1);
        //fp.isAsy = true;
        
        SD work;
        work.Verbose = 100;
        work.epN = 0;
        work.sN = 2;
        work.Evaluate(fp);
        cout << work.VEResult() << endl;
        cout << "Check with: " << endl;
        cout << "(4 +- 1.604518999E-36)*s+(-6.283185307 +- 0)*sqrt(s)+I*s*(1.157409821E-37 +- 9.367271553E-38)+ep^(-1)*(I*(7.431143456E-51 +- 4.802973566E-37)+(1.00000000000000000000000004104146966323 +- 3.4162E-17))+I*(2.314819645E-37 +- 1.356564457E-33)*s^2+(3.38629434919921 +- 5.17274E-6)+I*(-7.23381139E-39 +- 1.249988435E-35)+(-2.666666667 +- 3.644273589E-33)*s^2" << endl;
    }
    
    // glauber region using Expand
    if(false) {
        auto vs = SD::vs;
        auto m2 = vs;
        auto eps = SD::eps;
        FeynmanParameter fp;
        fp.LoopMomenta = lst{k};
        fp.Propagators = lst{-pow(k,2)+m2, -pow(k-p,2), -pow(k+p,2), -pow(k-q,2), -pow(k+q, 2)};
        fp.Exponents = lst{1,1,1,1,1};
        
        //fp.Exponents = lst{1,0,1,0,1+eps};
        //fp.Exponents = lst{0,0,1,1,1+eps};
        //fp.Exponents = lst{1,0,1,1+eps,0};
        //fp.Exponents = lst{1,1,0,0,1+eps};
        //fp.Exponents = lst{0,1,0,1,1+eps};
        //fp.Exponents = lst{1,1,0,1+eps,0};
        //fp.Exponents = lst{0,0,2,1,1+eps};
        //fp.Exponents = lst{0,1,2,0,1+eps};
        //fp.Exponents = lst{0,1,2,1+eps,0};
        
        fp.lReplacements[p*p] = 0;
        fp.lReplacements[q*q] = 0;
        fp.lReplacements[p*q] = ex(1)/2;
        fp.Prefactor = SD::PrefactorFIESTA(1);
        //fp.isAsy = true;
        
        SD work;
        work.Verbose = 100;
        work.epN = 0;
        work.sN = 1;
        work.Evaluate(fp);
        cout << work.ResultError << endl;
        cout << "Check with: " << endl;
        cout << "log(s)*s^(-2)*VE(1.3238115099483448415528850590000000000000000000002112512886E-9,3.510126449362935409482245189528864050346137189611428005985E-6)+I*VE(-1.57079632679489661923132334499381529,8.71522421484853131588727151882984256E-16)*s^(-1)+s^(-2)*ep^(-2)*VE(0.0,3.9232292797978184170075622852023241637977422660484154425034E-16)+VE(0.0,1.9616146398989092085037811426011620818988711330242077212517E-16)*log(s)^2*s^(-2)+s*VE(-0.111106451546765318514395345458636079734,9.163755961771124785414185632074419672435841547207328506909E-6)+I*s*VE(0.5235987720760863352000545454405033805,2.6034190355205586325249960368700093111570194457692332784506E-6)+I*log(s)*VE(-1.57079632679489661923132334499381529,8.71522421484853131588727151882984256E-16)*s^(-2)+log(s)*VE(0.0,1.0997668240985033652005882954582151731488617027444605484752E-6)+VE(1.0000000031236191041035204327965610309772023337090539384464,1.6718130021479970270029206529595247257145427402957454456992E-6)*s^(-1)+I*VE(-0.7853981637259288783190481242233711355000000000000000000001,1.5645035672881272578811216799374670427052961853499100067864E-6)+s^(-2)*VE(6.278363235085347232627482317379857362190017180344933681999E-7,9.271055916639131627156909257021374856144044322440918373868E-6)+log(s)*s^(-1)*VE(1.000000000000000000000001052557887748,1.2406340307223121222250435146788535106211871747612151137623E-15)+VE(2.79819652376833809643868286878802737775E-9,8.719604734375858749658924147355563671295881359069624936935E-6)+ep^(-1)*(VE(0.0,1.2501264132775092852612248098280997728161241342894561929013E-6)+VE(-2.0000000000000000000000021051157755,1.109656811157860968590369441796960976E-15)*s^(-1)+I*s^(-2)*VE(1.57079632679489661923132334499381529,8.71522421484853131588727151882984256E-16)+s*VE(0.0,2.689972838459744152609996879199861940590983878066773929696E-6)+VE(1.0986943073755659029658564129999999999999999999997811934217E-9,2.644196285198795012196792453623023673595490267035870891628E-6)*s^(-2))+log(s)*VE(0.3333333329105485395490817864901137184,2.70047680208401488417856961495488082707148506235042748986E-6)*s+I*s^(-2)*VE(-1.1525332939291964536737424658283386940036941970811661287945E-9,1.7060833294960124643053256438883450462084194568910039984663E-6)" << endl;
    }

    // glauber region / apart & asy
    if(false) {
        
        auto eps = SD::eps;
        auto vs = SD::vs;
        auto m2 = vs;
        lst ns;
        ns.append(lst{1,0,1,0,1+eps});
        ns.append(lst{0,0,1,1,1+eps});
        ns.append(lst{1,0,1,1+eps,0});
        ns.append(lst{1,1,0,0,1+eps});
        ns.append(lst{0,1,0,1,1+eps});
        ns.append(lst{1,1,0,1+eps,0});
        ns.append(lst{0,0,2,1,1+eps});
        ns.append(lst{0,1,2,0,1+eps});
        ns.append(lst{0,1,2,1+eps,0});
        
        lst prefs = lst{4*m2*m2,-2*m2*m2,4*m2*m2,4*m2*m2,-2*m2*m2,4*m2*m2,-m2,m2,m2};
        ex res = 0;
    
        for(int i=0; i<ns.nops(); i++) {
            auto nn = ns.op(i);
            FeynmanParameter fp;
            fp.LoopMomenta = lst{k};
            fp.Propagators = lst{-pow(k,2)+m2, -pow(k+p,2), -pow(k-p,2), -pow(k+q, 2), -pow(k-q,2)};
            fp.Exponents = ex_to<lst>(nn);
            fp.lReplacements[p*p] = 0;
            fp.lReplacements[q*q] = 0;
            fp.lReplacements[p*q] = ex(1)/2;
            fp.Prefactor = SD::PrefactorFIESTA(1)/prefs.op(i);
            //fp.Prefactor = SD::PrefactorFIESTA(1);
            fp.isAsy = true;
            
            SD work;
            work.Verbose = 100;
            work.epN = 0;
            work.sN = 1;
            work.Evaluate(fp);
            res += work.ResultError;
        }
        
        cout << res << endl;
        cout << "Check with: " << endl;
        cout << "I*VE(2.52262034073622166371372559959260009823E-11,2.60023427641987266160597720857802386020061886064997077642E-6)*s^(-2)+I*VE(2.52262034073622166371384775226356014706E-11,2.6002342764198726616059772083768488663254305211403816945305E-6)*s^(-2)+(2*I)*s^(-2)*VE(0.0,1.844447578915130401505924304127802449395102419538333729669E-17)+2*s^(-1)*VE(1.000000000000000000000000002498451694723,1.4846438675532848650516675695179448294059040160278259390442E-17)+(2*I)*s^(-2)*VE(-1.479289940828402366863905325443786982246E-53,0)*ep^(-2)+VE(-0.062499757783350992188299836159491497067,3.870651151326086316634386131377189674794443191369409904225E-6)+VE(-0.0624997577833509921882997688847017883135,3.870651151326086316630560170712910928058829617795942589257E-6)+(2*I)*log(s)*s^(-1)*VE(1.20724655612172970134689308114631011283E-16,6.5224559065777375679052164350361820959278553203431489044E-8)+VE(-4.99690131501102305346451919457062251042E-27,2.3494119969621931174410690802498597170973253665465086223195E-17)*s^(-1)+I*VE(1.5707963267948966192313216916397514421,0)*s^(-1)+s^(-1)*VE(-2.0,0)*ep^(-1)+2*eps^(-1)*(s*VE(-4.11423022787800627789057788027785987237E-38,9.108039715724256276503774745547219918721371339703017496682E-11)+s^(-2)*VE(0.0,5.871058989164434209235062748408692317447072170655029395933E-18)+VE(5.11412864361036832649554835860036496561E-39,1.7049752694752659970683559315883781411169229190276487018103E-12)+s^(-1)*VE(3.25511823801620141107974032818152069915E-39,8.70110232869985793109779841712874163421898582523269462335E-15))+VE(-0.2499999878258930383777681720349121761834,3.387257988177941070331244931438797318236495347678239540527E-6)*s^(-1)+VE(-0.249999987825893038377768172034624397111,3.387257988177941070331245049297956153778405252317922977703E-6)*s^(-1)+(2*I)*log(s)*VE(6.15221965967430275781722270041690765404E-17,3.44823818306302715026917570392201481765883227712138750739E-8)+(2*I)*log(s)^2*VE(-9.81818693059545310619154390997255128595E-91,0)*s+2*VE(0.0833333333333571008139559775115174369763,5.449233715192357215977367679696935283363902947490152462922E-7)*log(s)*s+2*log(s)*s^(-1)*VE(0.250000000000000000000000263139471961999,4.351322997875967557434056997223445533736457877633461086066E-15)+2*VE(7.34683969263929692480460335763903548637E-40,0)*log(s)^2+2*eps^(-1)*(I*s^(-1)*VE(1.15917033089735131107172144918176944754E-38,9.224145603062737480579936881060776774828526339109775330517E-8)+VE(3.53039921189662697473900745744049294493E-32,1.223159488467477213863536694720241780220271243656966639203E-8)*s+I*VE(0.0,4.849370039080281518290888723297419114865492860414723751898E-10)*s^(-2)+s^(-2)*VE(5.8774717541114375398436826861112283891E-39,1.8640009407998948337090153731536867455895009791997572238835E-8)+VE(3.17217211754480314975203790080532539077E-35,2.709030358723460120224007846489251902874168847490144250546E-8)+s^(-1)*VE(-3.52648305246686252390620961166673703346E-38,4.438926302131612661034585287948424033110826920370360476771E-8)+I*VE(3.71218036863805707612269784724470486892E-40,4.876545204780492289874626802453356836788840587413761650528E-8)+I*VE(2.13111380354650406618270333072845820557E-38,1.2432953903537719074523057444927687211659636995469572808722E-8)*s)+2*log(s)*s^(-2)*VE(0.0,8.806588483746651313852594122613038476170608255982544093898E-18)+(2*I)*log(s)*s^(-2)*VE(-0.7853981633974485007523783569857239798,3.429022439116540040666515341145666040725E-10)+2*log(s)*VE(-0.12500000000000014393352227698095070991,2.3217684447988348463856807395829317403447329929485815615757E-7)+s*VE(-0.0277780261400709810871115313007905853272,4.901363868867246357354903959100390184560439652754706622675E-6)+s*VE(-0.0277780261400709810871010410196601998149,4.901363868867246356432229464513540120527837993869788010996E-6)+2*log(s)*VE(0.124999999999999999999946307623571179505,8.534796485085683438781376250530210330185145786476022205363E-13)+I*VE(-3.1415926535897932384626433832795028842,0)*s^(-1)+I*s^(-1)*VE(0.78539815753475209585467027872469998183,3.228366373312409350661548887953886783411329775656608813307E-6)+I*s^(-1)*VE(0.785398157534752095854670278725224333324,3.228366373312409350661548973829655742672852960743922404088E-6)+2*log(s)^2*s^(-2)*VE(0.125,0)+2*log(s)*s^(-1)*VE(0.2499999999999997113911586704062830092375,3.335001583898141678352189024210581511359427416225318354699E-8)+2*log(s)*s*VE(0.0833333333333333333368327079725649611407,4.571221358606019140252406426557386034624775214833626445144E-11)+(2*I)*log(s)^2*s^(-2)*VE(7.39644970414201183431952662721893491123E-54,0)+2*log(s)*s^(-2)*VE(-4.84172003313185021039749903244560651877E-13,1.3098758933066440834829889317910371136159512284201432656373E-6)+2*ep^(-1)*(s^(-1)*VE(5.8774717541114375398436826861112283891E-39,8.302931247968816947063490990572020730003092728206357110868E-18)+s*VE(-5.8774717541114375398436826861112283891E-39,4.16956658483749692629771447775783341601335452332586513939E-17)+VE(1.49875529729841657266013908495836323922E-36,1.9857174990076684466781060880196168335002993700612327886936E-17)+VE(0.0,1.1742117978328868418470125496817384634894144341310058791865E-17)*s^(-2))+I*s*VE(0.261799357588715062118856526408745666499,5.47953659842166864093064880009135756781447182888695901359E-6)+I*s*VE(0.261799357588715062118856526496703657434,5.479536598421668640930603523742956406712459216050437058669E-6)+VE(0.411233520454217642973155957719773800726,3.349681172393485018209238250224076675254788230406520971723E-6)*s^(-2)+VE(0.411233520454217642973155957719775452601,3.3496811723934850182092382506531387120125928089854783984725E-6)*s^(-2)+s^(-2)*VE(-1.233700440789393841682265894281976216666,8.630215967262923627224470561743089388940529108656610017191E-6)+VE(-1.23370064656887391265414933779627980216,1.298941098591281863201894642431194296480701617712171758952E-5)*s^(-2)+(2*I)*s^(-2)*ep^(-1)*VE(0.78539816339744830961566084581987572105,0)+2*(I*VE(0.0,1.3337662462894994370576849219981360829297036824391554804455E-60)*s^(-1)+I*VE(0.0,4.10743089228716549045626715558912335417421352187686749541E-59)+s^(-1)*VE(0.0,1.1270324781146270157300122914312068433360910997698692416767E-8)+s*VE(-2.37677582413844850710491817903570452801E-14,5.448547282268729653982922008782456210970747513234057035885E-7)+I*VE(5.55603322175693515758634594638574652593E-52,1.2895969898860898687527282795368762491027041671020342573143E-58)*s+VE(0.0,2.3138527359884365420008770913824771140864970378148461596714E-7)+I*VE(-2.93873587705571876992184134305561419455E-39,7.75035253315419594692733652152411269105E-59)*s^(-2)+s^(-2)*VE(4.85253539685196213679816228454773105345E-13,1.3098095781030591050549302718529983240966804730226903651172E-6))*ep^(-1)+2*VE(-0.125,0)*log(s)^2*s^(-2)+VE(0.0625000020183855061293153009064843600518,4.914343176285765481061243866593352786108469571298201165587E-6)+VE(0.0625000020183855061293153051108181250053,4.914343176285765481061243105502079590625942803850792470182E-6)+(2*I)*VE(8.46178982556328566559694429296353344492E-19,8.79142601537127781856307407066331934689354403624541108552E-9)*log(s)*s+I*s^(-1)*VE(-1.5707963267948966192313216916397514421,0)+2*s^(-2)*VE(0.822467019076076625349990866925191385252,3.4349352782014826278931828698016764290603976828580892024194E-6)+s*VE(-0.027777684693463894133011011355246668408,5.77753111094045997973896574292339275582174000613546486446E-6)+s*VE(-0.02777768469346389413300508318860623371875,5.777531110940459979739196324950480328922751379388007646888E-6)+I*VE(-0.392699085235363134014612430058920784032,4.560358144415281982456422564080356867958837502352329006676E-6)+I*VE(-0.392699085235363134014612430057672231395,4.560358144415281982456422593961986985149603525847120741185E-6)+VE(-0.250000010763739850393502636124219429904,3.93131616476582471625550230047922339074231289681268229266E-6)*s^(-1)+VE(-0.250000010763739850393502636120619836752,3.931316164765824716255501927018355401677468337794551977576E-6)*s^(-1)" << endl;
    }
    
    
    
    return 0;
}
